# Load tidyverse packages
library(tidyverse)
# Load dataset using read_csv in readr
train_users_2 = read_csv("train_users_2.csv")
# Load the tidyverse packages
library(tidyverse)
# Load dataset using read.csv from Base R, producing a data.frame
start_time1 = Sys.time();train_users_baseR = read.csv("train_users_2.csv");print(t1 <- Sys.time()-start_time1)
# Print data.frame
train_users_baseR
# Print data.frame
train_users_baseR %>% head()
# Load dataset using read_csv from readr, producing a tibble
start_time2 = Sys.time();train_users_tidyverse = read_csv("train_users_2.csv");print(t2 <- Sys.time()-start_time2) # Faster!
print(as.double(t1)/as.double(t2))
# Print tibble
train_users_tidyverse
# Choose column with select
train_select = select(train_users_tidyverse, id, date_account_created, timestamp_first_active, age, gender)
?select
# Order rows with arrange
arrange(train_select, age)
train_arrange = arrange(train_select, desc(age))
train_arrange
# Pick observations by values with filter
train_filter = filter(train_arrange, age < 120)
train_filter
# Transform and create new variables with mutate
library(lubridate) # load lubridate package for time related functions
train_mutate = mutate(train_filter,
timestamp_first_active = ymd_hms(timestamp_first_active))
train_mutate
# Grouped summaries using group_by and summarise
train_group_by = group_by(train_mutate, gender)
train_summarise = summarise(train_group_by,
mean_age = mean(age),
count = n())
train_summarise
# Pipeline the dplyr chain of events
train_users_tidyverse %>%
select(id, date_account_created, timestamp_first_active, age, gender) %>%
arrange(desc(age)) %>%
filter(age < 120) %>%
mutate(timestamp_first_active = ymd_hms(timestamp_first_active)) %>%
group_by(gender) %>%
summarise(mean_age = mean(age),
count = n())
# Histograms
train_mutate %>%
ggplot() +
geom_histogram(aes(x = age), binwidth = 1)
# Histograms
ggplot(data = train_mutate) +
geom_histogram(aes(x = age), binwidth = 1)
# Frequency polygons instead of stacked histograms
train_mutate %>%
ggplot(aes(x = age)) +
geom_freqpoly(aes(color = gender),
lwd = 1.5,
binwidth = 1)
# Facet plot
train_mutate %>%
ggplot(aes(x = age)) +
geom_histogram(aes(fill = gender), binwidth = 1) +
facet_wrap( ~ gender)
# Load the tidyverse packages
library(tidyverse)
# Load dataset using read.csv from Base R, producing a data.frame
start_time1 = Sys.time();train_users_baseR = read.csv("train_users_2.csv");print(t1 <- Sys.time()-start_time1)
# Print data.frame
train_users_baseR
# Load dataset using read_csv from readr, producing a tibble
start_time2 = Sys.time();train_users_tidyverse = read_csv("train_users_2.csv");print(t2 <- Sys.time()-start_time2) # Faster!
print(as.double(t1)/as.double(t2))
# Print tibble
train_users_tidyverse
# Choose column with select
train_select = select(train_users_tidyverse, id, date_account_created, timestamp_first_active, age, gender)
train_select
# Order rows with arrange
arrange(train_select, age)
train_arrange
train_arrange = arrange(train_select, desc(age))
train_arrange
# Pick observations by values with filter
train_filter = filter(train_arrange, age < 120)
train_filter
# Transform and create new variables with mutate
library(lubridate) # load lubridate package for time related functions
train_mutate = mutate(train_filter,
timestamp_first_active = ymd_hms(timestamp_first_active))
train_mutate
train_summarise
# Pipeline the dplyr chain of events
train_users_tidyverse %>%
select(id, date_account_created, timestamp_first_active, age, gender) %>%
arrange(desc(age)) %>%
filter(age < 120) %>%
mutate(timestamp_first_active = ymd_hms(timestamp_first_active)) %>%
group_by(gender) %>%
summarise(mean_age = mean(age),
count = n())
# Histograms
ggplot(data = train_mutate) +
geom_histogram(aes(x = age), binwidth = 1)
train_mutate
# Histograms
ggplot(data = train_mutate) +
geom_histogram(aes(x = age), binwidth = 1)
# Frequency polygons instead of stacked histograms
train_mutate %>%
ggplot() +
geom_freqpoly(aes(x = age, color = gender),
lwd = 1.5,
binwidth = 1)
# Facet plot
train_mutate %>%
ggplot() +
geom_histogram(aes(x = age) binwidth = 1) +
facet_wrap( ~ gender)
# Facet plot
train_mutate %>%
ggplot() +
geom_histogram(aes(x = age) binwidth = 1) +
facet_wrap( ~ gender)
# Facet plot
train_mutate %>%
ggplot() +
geom_histogram(aes(x = age), binwidth = 1) +
facet_wrap( ~ gender)
# Load the tidyverse packages
library(tidyverse)
# Load dataset using read.csv from Base R, producing a data.frame
start_time1 = Sys.time();train_users_baseR = read.csv("train_users_2.csv");print(t1 <- Sys.time()-start_time1)
# Print data.frame
train_users_baseR
# Load dataset using read_csv from readr, producing a tibble
start_time2 = Sys.time();train_users_tidyverse = read_csv("train_users_2.csv");print(t2 <- Sys.time()-start_time2) # Faster!
print(as.double(t1)/as.double(t2))
# Print tibble
train_users_tidyverse
# Choose column with select
train_select = select(train_users_tidyverse, id, date_account_created, timestamp_first_active, age, gender)
train_select
# Choose column with select
train_selected = select(train_users_tidyverse, id, date_account_created, timestamp_first_active, age, gender)
train_selected
# Sort rows with arrange
arrange(train_selected, age)
train_arranged = arrange(train_selected, desc(age))
train_arranged
# Pick rows by values with filter
train_filtered = filter(train_arranged, age < 120)
train_filtered
# Transform and create new variables with mutate
library(lubridate) # load lubridate package for time related functions
train_mutated = mutate(train_filtered,
timestamp_first_active = ymd_hms(timestamp_first_active))
train_mutated
# Load the tidyverse packages
library(tidyverse)
# Load dataset using read.csv from Base R, producing a data.frame
start_time1 = Sys.time();train_users_baseR = read.csv("train_users_2.csv");print(t1 <- Sys.time()-start_time1)
# Print data.frame
train_users_baseR
# Load dataset using read_csv from readr, producing a tibble
start_time2 = Sys.time();train_users_tidyverse = read_csv("train_users_2.csv");print(t2 <- Sys.time()-start_time2) # Faster!
print(as.double(t1)/as.double(t2))
# Print tibble
train_users_tidyverse
# Choose column with select
train_selected = select(train_users_tidyverse, id, date_account_created, timestamp_first_active, age, gender)
train_selected
# Sort rows with arrange
arrange(train_selected, age)
train_arranged = arrange(train_selected, desc(age))
train_arranged
# Pick rows by values with filter
train_filtered = filter(train_arranged, age < 120)
train_filtered
# Transform and create new variables with mutate
library(lubridate) # load lubridate package for time related functions
train_mutated = mutate(train_filtered,
timestamp_first_active = ymd_hms(timestamp_first_active))
train_mutated
train_summarised = summarise(train_group_by,
mean_age = mean(age),
count = n())
train_summarised
# Pipeline the dplyr chain of events
train_users_tidyverse %>%
select(id, date_account_created, timestamp_first_active, age, gender) %>%
arrange(desc(age)) %>%
filter(age < 120) %>%
mutate(timestamp_first_active = ymd_hms(timestamp_first_active)) %>%
group_by(gender) %>%
summarise(mean_age = mean(age),
count = n())
# Histograms
ggplot(data = train_mutate) +
geom_histogram(aes(x = age), binwidth = 1)
# Choose column with select
train_selected = select(train_users_tidyverse, id, age, gender)
train_selected
# Load the tidyverse packages
library(tidyverse)
# Load dataset using read.csv from Base R, producing a data.frame
start_time1 = Sys.time();train_users_baseR = read.csv("train_users_2.csv");print(t1 <- Sys.time()-start_time1)
# Print data.frame
train_users_baseR
# Load dataset using read_csv from readr, producing a tibble
start_time2 = Sys.time();train_users_tidyverse = read_csv("train_users_2.csv");print(t2 <- Sys.time()-start_time2) # Faster!
print(as.double(t1)/as.double(t2))
# Print tibble
train_users_tidyverse
# Choose column with select
train_selected = select(train_users_tidyverse, id, timestamp_first_active, age, gender)
# Load dataset using read_csv from readr, producing a data frame (called tibble)
train = read_csv("train_users_2.csv")
# Print data frame
train
# Sort rows with arrange
arrange(train_selected, age)
# Load the tidyverse packages
library(tidyverse)
# Load dataset using read_csv from readr, producing a data frame (called tibble)
train = read_csv("train_users_2.csv")
# Print data frame
train
# Choose column with select
train_selected = select(train, id, timestamp_first_active, age, gender)
train_selected
# Sort rows with arrange
arrange(train_selected, age)
train_arranged = arrange(train_selected, desc(age))
train_arranged
# Pick rows by values with filter
train_filtered = filter(train_arranged, age < 120)
train_filtered
# Transform and create new variables with mutate
library(lubridate) # load lubridate package for time related functions
train_mutated = mutate(train_filtered,
timestamp_first_active = ymd_hms(timestamp_first_active))
train_mutated
train_summarised = summarise(train_group_by,
mean_age = mean(age),
count = n())
train_summarised
# Pipeline the dplyr chain of events
train %>%
select(id, date_account_created, timestamp_first_active, age, gender) %>%
arrange(desc(age)) %>%
filter(age < 120) %>%
mutate(timestamp_first_active = ymd_hms(timestamp_first_active)) %>%
group_by(gender) %>%
summarise(mean_age = mean(age),
count = n())
# Histograms
ggplot(data = train_mutate) +
geom_histogram(aes(x = age), binwidth = 1)
# Histograms
ggplot(data = train_filtered) +
geom_histogram(aes(x = age), binwidth = 1)
# Frequency polygons instead of stacked histograms
train_filtered %>%
ggplot() +
geom_freqpoly(aes(x = age, color = gender),
lwd = 1.5,
binwidth = 1)
# Histograms
ggplot(data = train_filtered) +
geom_histogram(aes(x = age), binwidth = 1)
# Frequency polygons instead of stacked histograms
ggplot(data = train_filtered) +
geom_freqpoly(aes(x = age, color = gender),
lwd = 1.5,
binwidth = 1)
# Frequency polygons instead of stacked histograms
ggplot(data = train_filtered) +
geom_freqpoly(aes(x = age, color = gender),
lwd = 1.5,
binwidth = 1)
# Load the tidyverse packages
library(tidyverse)
# Load dataset using read_csv from readr, producing a data frame (called tibble)
train = read_csv("train_users_2.csv")
# Print data frame
train
# Choose column with select
train_selected = select(train, id, timestamp_first_active, age, gender)
train_selected
# Sort rows with arrange
arrange(train_selected, age)
train_arranged = arrange(train_selected, desc(age))
train_arranged
# Pick rows by values with filter
train_filtered = filter(train_arranged, age < 120)
train_filtered
# Transform and create new variables with mutate
library(lubridate) # load lubridate package for time related functions
train_mutated = mutate(train_filtered,
timestamp_first_active = ymd_hms(timestamp_first_active))
train_mutated
# Calculations over groups using group_by and summarise
train_group_by = group_by(train_mutated, gender)
train_summarised = summarise(train_group_by,
mean_age = mean(age),
count = n())
train_summarised
# Histograms
ggplot(data = train_filtered) +
geom_histogram(aes(x = age), binwidth = 1)
90+15
# Frequency polygons instead of stacked histograms
ggplot(data = train_filtered) +
geom_freqpoly(aes(x = age, color = gender),
lwd = 1.5,
binwidth = 1)
# Load the tidyverse packages
library(tidyverse)
# Load dataset using read_csv from readr, producing a data frame (called tibble)
train = read_csv("train_users_2.csv")
# Print data frame
train
# Choose column with select
train_selected = select(train, id, timestamp_first_active, age, gender)
train_selected
# Sort rows with arrange
arrange(train_selected, age)
train_arranged = arrange(train_selected, desc(age))
train_arranged
# Pick rows by values with filter
train_filtered = filter(train_arranged, age < 120)
train_filtered
train_mutated = mutate(train_filtered,
timestamp_first_active = ymd_hms(timestamp_first_active))
train_mutated
# Calculations over groups using group_by and summarise
train_group_by = group_by(train_mutated, gender)
train_summarised = summarise(train_group_by,
mean_age = mean(age),
count = n())
train_summarised
# Histograms
ggplot(data = train_filtered) +
geom_histogram(aes(x = age), binwidth = 1)
# Frequency polygons instead of stacked histograms
ggplot(data = train_filtered) +
geom_freqpoly(aes(x = age),
lwd = 1.5,
binwidth = 1)
# Frequency polygons instead of stacked histograms
ggplot(data = train_filtered) +
geom_freqpoly(aes(x = age, color = gender),
lwd = 1.5,
binwidth = 1)
ggplot(data = train_filtered) +
geom_histogram(aes(x = age), binwidth = 1) +
facet_wrap( ~ gender)
### ggplot2 facet plot ###
ggplot(data = train_filtered) +
geom_histogram(aes(x = age), binwidth = 1) +
facet_wrap( ~ gender)
train_filtered %>%
ggplot() +
geom_histogram(aes(x = age), binwidth = 1) +
facet_wrap( ~ gender)
train_filtered %>%
ggplot() +
geom_histogram(aes(age), binwidth = 1) +
facet_wrap( ~ gender)
# Ugly stacked histogram plot
ggplot(data = train_filtered) +
geom_histogram(aes(x = age, color = gender), binwidth = 1)
# Ugly stacked histogram plot
ggplot(data = train_filtered) +
geom_histogram(aes(x = age, fill = gender), binwidth = 1)
# Load the tidyverse packages
library(tidyverse)
# Load dataset using read_csv from readr, producing a data frame (called tibble)
train = read_csv("train_users_2.csv")
# Print data frame
train
# Choose column with select
train_selected = select(train, id, timestamp_first_active, age, gender)
train_selected
# Sort rows with arrange
arrange(train_selected, age)
train_arranged = arrange(train_selected, desc(age))
train_arranged
# Pick rows by values with filter
train_filtered = filter(train_arranged, age < 120)
train_filtered
# Transform and create new variables with mutate
library(lubridate) # load lubridate package for time related functions
train_mutated = mutate(train_filtered,
timestamp_first_active = ymd_hms(timestamp_first_active))
train_mutated
# Calculations over groups using group_by and summarise
train_group_by = group_by(train_mutated, gender)
train_summarised = summarise(train_group_by,
mean_age = mean(age),
count = n())
train_summarised
train_summarised
# Histograms
ggplot(data = train_filtered) +
geom_histogram(aes(x = age), binwidth = 1)
# Frequency polygons instead of stacked histograms
ggplot(data = train_filtered) +
geom_freqpoly(aes(x = age, color = gender),
lwd = 1.5,
binwidth = 1)
ggplot(data = train_filtered) +
geom_histogram(aes(x = age, color = gender), binwidth = 1)
# Frequency polygons instead of stacked histograms
ggplot(data = train_filtered) +
geom_freqpoly(aes(x = age, color = gender),
lwd = 1.5,
binwidth = 1)
# Frequency polygons instead of stacked histograms
ggplot(data = train_filtered) +
geom_freqpoly(aes(x = age, fill = gender),
lwd = 1.5,
binwidth = 1)
# Frequency polygons instead of stacked histograms
ggplot(data = train_filtered) +
geom_freqpoly(aes(x = age, color = gender),
lwd = 1.5,
binwidth = 1)
ggplot(data = train_filtered) +
geom_histogram(aes(x = age, fill = gender), binwidth = 1)
ggplot(data = train_filtered) +
geom_histogram(aes(x = age, fill = as.factor(gender)), binwidth = 1)
ggplot(data = train_filtered) +
geom_histogram(aes(x = age, fill = gender), binwidth = 1)
# Frequency polygons instead of stacked histograms
ggplot(data = train_filtered) +
geom_freqpoly(aes(x = age, color = gender),
lwd = 1.5,
binwidth = 1)
# Frequency polygons instead of stacked histograms when splitting up in categories
ggplot(data = train_filtered) +
geom_freqpoly(aes(x = age, color = gender),
lwd = 1.5,
binwidth = 1)
